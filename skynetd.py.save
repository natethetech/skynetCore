#!/usr/bin/python
# To kick off the script, run the following from the python directory:
#   PYTHONPATH=`pwd` python testdaemon.py start

#standard python libs
import sys
import logging
import time
#Python SNMP High-Level API
from pysnmp.hlapi import *
#InitialState Streamer
from ISStreamer.Streamer import Streamer
import re
import subprocess
import os
import glob
#import pigpio
import RPi.GPIO as GPIO
import thread

startTime = time.time()

GPIO.setmode(GPIO.BCM)    #set pin numbering to broadcom interface number

#third party libs
from daemon import runner

streamer = Streamer(bucket_name="SKYNET-TEMPS",bucket_key="8WC35WLXAAAY",access_key="XgKetehqZ0ZOkLP91gLsddpj3HYUJK6Q")
pistreamer = Streamer(bucket_name="SKYNET-PI",bucket_key="J53VN6NNCYEJ",access_key="XgKetehqZ0ZOkLP91gLsddpj3HYUJK6Q")

#########################################################
#
#  GLOBALS
#
#########################################################

#SNMP
community = 'public'
port = 161

#GLBOALS
tempTemps = [0,0,0]

#List hosts to poll for Celsius temperatures
tempHosts = [
                ['192.168.1.226','.1.3.6.1.4.1.21796.3.3.3.1.6.3','         Outdoor',-999.9,"_OUTSIDE_"],
                ['192.168.1.228','.1.3.6.1.4.1.21796.3.3.3.1.6.1','  Master Bedroom',-999.9,"MASTERBED"],
                ['192.168.1.224','.1.3.6.1.4.1.21796.3.3.3.1.6.1','   Upstairs Hall',-999.9,"_UP_HALL_"],
                ['192.168.1.224','.1.3.6.1.4.1.21796.3.3.3.1.6.2','           Craft',-999.9,"__CRAFT__"],
                ['192.168.1.225','.1.3.6.1.4.1.21796.3.3.3.1.6.1','       Stairwell',-999.9,"__STAIRS_"],
                ['192.168.1.227','.1.3.6.1.4.1.21796.3.3.3.1.6.1','     Living Room',-999.9,"_LIVINGRM"],
                ['192.168.1.223','.1.3.6.1.4.1.21796.3.3.3.1.6.1','    UpstairsBath',-999.9,"BATH2"],
                ['192.168.1.226','.1.3.6.1.4.1.21796.3.3.3.1.6.2','        Basement',-999.9,"BASEMENT"],
                ['192.168.1.227','.1.3.6.1.4.1.21796.3.3.3.1.6.2','   Fish Tank 15g',-999.9,"FISH15"]
       ]


#List hosts to poll for Humidity (%RH) 
#NOT YET IMPLEMENTED
humidHosts = [
                ['192.168.1.226','.1.3.6.1.4.1.21796.3.3.3.1.6.1','Outside Humid']
       ]

device_file = ["",""]

###########
# GPIO Manipulation for Relay Control
# Master Thermostat Pinout: 5,6,13,19
pinList = [
	5,     #Relay 0: SYSTEM LOCK/ENABLE
	6,     #Relay 1: FAN/Blower Control
	13,    #Relay 2: HEAT Control
	19,    #Relay 3: COOL Control
	26,    #Ghost Relay: AUTOMATIC Control (1) [inverse is MANUAL (0)]
    ]

HVACpin_SYSTEM = 0
HVACpin_FAN = 1
HVACpin_HEAT = 2
HVACpin_COOL = 3
HVACpin_AUTO = 4

#thisPi = pigpio.pi()
#if not thisPi.connected:
#	#handle this error somehow
#	print "BAD CONNECT STATE"
#else:
#	print "Proceeding"

RELAY_ON = GPIO.LOW
RELAY_OFF = GPIO.HIGH

GPIO.setwarnings(False)

HVAC_status = [0,0,0,0,0]

HEAT_times = [0,0]   #last off   #last on
COOL_times = [0,0]

#rudimentary config for initial logic design
mode = 2           #0 off 1 fan 2 heat 3 cool
setpoint = 90      #rudimentary set temperature for initial logic design
hyst_temp = 4.0    #degrees over/under before trigger
hyst_time = 600    #seconds until next restart

def HVAC_service_audit(which):      
	logger.debug("HVAC_service_audit(%s)" % which)

	pinstat = GPIO.input(pinList[which])
        if pinstat:
        	pinstatus = 0
        else:
                pinstatus = 1
        if (HVAC_status[which] != pinstatus) and (which != HVACpin_AUTO):
                logger.info("*****Pin Change Detected on relay %s" % which)
                logger.info("*****HVAC_status: %s" % HVAC_status[which])
                logger.info("*****Pin Status: %s" % pinstatus)
                HVAC_status[which] = pinstatus
	elif (HVAC_status[which] != pinstatus) and (which == HVACpin_AUTO):
		logger.info("**********AUTOMATIC MODE CHANGE DETECTED***************")
		if pinstat:
			#manual switch on
			logger.info("MANUAL MANUAL MANUAL MANUAL MANUAL MANUAL MANUAL MANUAL MANUAL")
			HVAC_goManual()
		else:
			logger.info("AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO AUTO")
			HVAC_goAuto()
	logger.debug("Audit Complete")

def HVAC_goAuto():
	#test conditions, check relays, then change relays (turn off a/c for heat, etc) in a safe way
	logger.info("*****************************************************************")
	logger.info("HVAC_goAuto()")
	HVAC_logic(True)
	HVAC_status[4] = 1	

